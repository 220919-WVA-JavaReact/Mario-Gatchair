React
    - A JavaScript library for building user interfaces
        - lightweight
            - meant to be used with other modules of the user's choice (ie React Router)
        - React DOM, React Native, React VR
    - Declarative
        - using React, we describe the desired state using JSX
            - React handles the rest
    - Not a framework
        - Technically, React is a library and not a framework
        - Frameworks (like Vue, Angular) have their "right" way of doing things
            - "forced" to do things the way they want/ use their dependencies
            - Frameworks generally "call your code"
    - Component-based architecture
        - breaking down a UI into smaller reusable components
            - inject/remove views and functionality of the same page rather than requesting a new one
        - Single Page Applications (SPA)
            - Design Pattern
            - No longer need to fully reload the webpage with another view (ONLY ONE VIEW)
            - Web Pack
                - a static module bundler for modern JavaScript applications
    - Virtual DOM
        - Used to render elements more efficiently than traditional DOM manipulation
        - Keeps virtual views in memory
            - updates/changes made are compared to the virtual DOM representation in memory
            - the differential is calculated - Reconciliation
            - only the necessary changes are made to the DOM

JSX
    - JavaScript XML
    - syntax extension of JS, looks like HMTL but is JS function call
        - Compiled using Babel
    - lowercase tags are HMTL
    - Capitalized tags are reacted elements
    {} to evaluate JS or TS expressions

components
    - reusable pieces of code/"unit"
    - two main types of components 
        - Function components

function Header() {
    return (
        <header>
            <h1>Kevin Tran Huu!!!</h1>
        </header>
    );
}

export default Header;

        - Class components

import React from "react";

class Footer extends React.Component {
    render() {

        return (
            <footer>
                <span><strong>Java/React batch - HTML example</strong></span>
            </footer>
        );
    }
}

export default Footer;
    - Function components are preferred
        - simpler syntax
        - less code to transpile
        - "cleaner"

Routing
    - allows us to swap components dynamically based on the URL path of the application
    - react router DOM
    - defined <BrowserRouter></BrowserRouter>
    - defining paths to navigate to using the link component
        - ie: <Link to="/new"> </Link>
    - <Routes></Routes>
        - where routes are injected using <Routes> </Route>

Props
    - properties used to pass data down to the child component
        - look like HTML attributes
        - immutable/read=only objects
            - React's philosophy, components should manage their own state, but not their Props
            - Top manipulate parent's state, a setter function must be passed alongside as props

Container/Presentation components
    - Container
        - contains little to no markup
        - mainly concerned about application logic
        - typically stateful
    - Presentation
        - nearly all markup
        - receives data and actions via props from the container component
        - typically not stateful
    - Referred to as container/presentation, smart/dumb, stateful/stateless
